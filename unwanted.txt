# def total_transaction(self):
    #     temp_transactions = self.transactions
    #     network = self.nodes
    #     for nodes in network:
    #         response = requests.get(f'http://{nodes}/total_transaction')
    #         if response.status_code == 200:
    #             tran_chain = response.json()['transactions']
    #             temp_transactions = tran_chain + temp_transactions
    #     self.transactions = list(temp_transactions)

    # def change_chain(self):
    #     network = self.nodes
    #     flag = 0
    #     for node in network:
    #         response = requests.get(f'http://{node}/replace_chain')
    #         if response.status_code == 200:
    #             response1 = requests.get(f'http://{node}/get_chain')
    #             length = response1.json()['length']
    #             if length == len(self.chain):
    #                 flag = 1
    #             else:
    #                 flag = 3
    #         else:
    #             flag = 2
    #     return flag

    # def replace_chain(self):
    #     network = self.nodes
    #     longest_chain = None
    #     max_length = len(self.chain)
    #     self.transactions = []
    #     for nodes in network:
    #         response = requests.get(f'http://{nodes}/get_chain')
    #         if response.status_code == 200:
    #             length = response.json()['length']
    #             chain = response.json()['chain']
    #             if length > max_length and self.is_chain_valid(chain):
    #                 max_length = length
    #                 longest_chain = chain
    #     if longest_chain:
    #         self.chain = longest_chain
    #         return True
    #     return False


# Mining the Blockchain
# Replacing the chain by the longest chain if needed

# @app.route('/replace_chain', methods=['GET'])
# def replace_chain():
#     is_chain_replaced = blockchain.replace_chain()
#     if is_chain_replaced:
#         response = {'message': 'The nodes had different chain so the chain was replaced by longest chain.',
#                     'new_chain': blockchain.chain}
#     else:
#         response = {'message': 'All good. The chain is the largest one.',
#                     'actual_chain': blockchain.chain}
#     blockchain.received_money(blockchain.chain[-1])
#     return jsonify(response), 200